package com.rxtrack.model;

import java.io.BufferedReader;
import java.io.BufferedWriter;
import java.io.File;
import java.io.FileReader;
import java.io.FileWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;

import javax.xml.parsers.DocumentBuilder;
import javax.xml.parsers.DocumentBuilderFactory;
import javax.xml.parsers.ParserConfigurationException;
import javax.xml.transform.OutputKeys;
import javax.xml.transform.Transformer;
import javax.xml.transform.TransformerException;
import javax.xml.transform.TransformerFactory;
import javax.xml.transform.dom.DOMSource;
import javax.xml.transform.stream.StreamResult;

import org.eclipse.jface.preference.IPreferenceStore;
import org.w3c.dom.Attr;
import org.w3c.dom.Document;
import org.w3c.dom.Element;
import org.w3c.dom.NamedNodeMap;
import org.w3c.dom.Node;
import org.w3c.dom.NodeList;
import org.xml.sax.SAXException;

import com.rxtrack.Activator;
import com.rxtrack.ui.preferences.PreferenceConstants;


public class ScriptPersist {
	private static ScriptPersist _instance = null;
	public static ScriptPersist getInstance(){
		if (_instance==null){
			_instance = new ScriptPersist();
		}
		return _instance;
	}
	
	public void save(Script s){
		saveCSV(s);
	    saveXML(s);
	}
	
	private Document createNewXMLFile(){
		// create new document
		try {
		    DocumentBuilderFactory docFactory = DocumentBuilderFactory.newInstance();
		    DocumentBuilder docBuilder = docFactory.newDocumentBuilder();
			Document newdoc = docBuilder.newDocument();
			
			newdoc.appendChild(newdoc.createElement("scripts"));
			
			// save it
			StreamResult newResult = new StreamResult(new File("e:/temp/newxml.xml"));
			DOMSource newSource = new DOMSource(newdoc);
			TransformerFactory transformerFactory = TransformerFactory.newInstance();
			Transformer transformer = transformerFactory.newTransformer();
			transformer.transform(newSource, newResult);
			return newdoc;
		} catch (Exception e) {
			e.printStackTrace();
		}
		return null;
	}
	
	private Document loadXML(){
		File file = new File("e:/temp/newxml.xml");
	    DocumentBuilderFactory dbf = DocumentBuilderFactory.newInstance();
	    Document doc = null;
	    DocumentBuilder db = null;
	    try {
		    db = dbf.newDocumentBuilder();
		    doc = db.parse(file);
	    } catch (IOException e) {
			doc = createNewXMLFile();
		} catch (SAXException e) {
			doc = createNewXMLFile();
		} catch (ParserConfigurationException pce){
			pce.printStackTrace();
		}
		return doc;

	}
	
	private void saveXML(Script s) {
		try {
			/**
			 * Load the file append the element, and persist it.
			 */
		    Document doc = loadXML();
		    Element rootElement = doc.getDocumentElement();
				 
			// script elements
			Element script = doc.createElement("script");
			rootElement.appendChild(script);
			
			addAttribute(doc, script, "date", s.getDate());
			addAttribute(doc, script, "time", s.getTime());
			addAttribute(doc, script, "rx", s.getRx());
			
			addSubElement(doc, script, "mitte", s.getMitte());
			addSubElement(doc, script, "pics", s.getPics());
			addSubElement(doc, script, "sig", s.getSig());
			
			Element patient = doc.createElement("patient");
			script.appendChild(patient);
			
			addAttribute(doc, patient, "id", s.getPatient().getId());
			addAttribute(doc, patient, "name", s.getPatient().getName());
			addAttribute(doc, patient, "city", s.getPatient().getCity());

			Element inventoryItem = doc.createElement("inventoryitem");
			script.appendChild(inventoryItem);
			
			addSubElement(doc, inventoryItem, "bin", s.getInventoryItem().getBin());
			addSubElement(doc, inventoryItem, "dosage", s.getInventoryItem().getDosage());
			addSubElement(doc, inventoryItem, "pics", s.getInventoryItem().getPictures());
			addSubElement(doc, inventoryItem, "sig", s.getInventoryItem().getSig());
			addSubElement(doc, inventoryItem, "dispensed", s.getInventoryItem().getDispensed().toString());
			addSubElement(doc, inventoryItem, "inventory", s.getInventoryItem().getInventory().toString());
			
			// write the content into xml file
			TransformerFactory transformerFactory = TransformerFactory.newInstance();
			Transformer transformer = transformerFactory.newTransformer();
			transformer.setOutputProperty(OutputKeys.INDENT, "yes");

			DOMSource source = new DOMSource(doc);
			StreamResult result = new StreamResult(new File("e:/temp/newxml.xml"));
	 
			// Output to console for testing
			// StreamResult result = new StreamResult(System.out);
	 
			transformer.transform(source, result);
	 
			System.out.println("File saved!");
		
		  } catch (TransformerException tfe) {
			tfe.printStackTrace();
		  }
		
	}

	private void addAttribute(Document doc, Element element, String key,
			String value) {
		Attr attr = doc.createAttribute(key);
		attr.setValue(value);
		element.setAttributeNode(attr);
	}

	private void addSubElement(Document doc, Element parent, String key,
			String value) {
		Element element = doc.createElement(key);
		element.setTextContent(value);
		parent.appendChild(element);
	}

	private void saveCSV(Script s) {
		try{
	    	// add it to the model
			MasterModel.getInstance().getScriptList().add(0, s);

			IPreferenceStore store = Activator.getDefault().getPreferenceStore();
		    // Create file 
			File logFile = new File(store.getString(PreferenceConstants.P_PWD) + "\\" + store.getString(PreferenceConstants.P_LOGFILE));
			FileWriter fstream = new FileWriter(logFile,true);
	        BufferedWriter out = new BufferedWriter(fstream);
	        StringBuffer sb = new StringBuffer();
	        
	        String pics = s.getPics();	  
	        
	        sb.append(s.getPatient().getId()).append("|").append(s.getPatient().getName()).append("|").append(s.getRx()).append("|")
	        .append(s.getSig()).append("|").append(s.getMitte()).append("|").append(s.getInventoryItem().getDosage()).append("|")
	        .append(s.getDate()).append("|").append(s.getTime()).append("|")
	        .append(s.getInventoryItem().getInventory())
	        .append("|").append(pics).append("|").append(s.getInventoryItem().getBin()).append("\n");
	        
	        out.write(sb.toString());
	        
	        //Close the output stream
	        out.close();
	    }catch (Exception e){//Catch exception if any
	      System.err.println("Error: " + e.getMessage());
	    }	
	}

	public List<Script> loadXMLForReading(){
		List<Script> list = new ArrayList<Script>();
		
		Document doc = loadXML();
		NodeList nodeList = doc.getElementsByTagName("script");
		
		for (int i=0;i<nodeList.getLength();i++){
			Script s = new Script();
			Node node = nodeList.item(i);
			NamedNodeMap map = node.getAttributes();
			s.setRx(map.getNamedItem("rx").getNodeValue());
			s.setDate(map.getNamedItem("date").getNodeValue());
			s.setTime(map.getNamedItem("time").getNodeValue());
			
			if (node.getNodeType() == Node.ELEMENT_NODE) {
				Element element = (Element) node;
				s.setMitte(getValue("mitte", element));
				s.setPics(getValue("pics", element));
				s.setSig(getValue("sig", element));
				
				Element patient = (Element)element.getElementsByTagName("patient").item(0);
				s.setPatient(new Patient());
				NamedNodeMap patientAttributeMap = patient.getAttributes();
				s.getPatient().setId(patientAttributeMap.getNamedItem("id").getNodeValue());
				s.getPatient().setName(patientAttributeMap.getNamedItem("name").getNodeValue());
				s.getPatient().setCity(patientAttributeMap.getNamedItem("city").getNodeValue());
				
				Element inventoryitem = (Element)element.getElementsByTagName("inventoryitem").item(0);
				s.setInventoryItem(new InventoryItem());
				s.getInventoryItem().setBin(getValue("bin", inventoryitem));
				s.getInventoryItem().setDosage(getValue("dosage", inventoryitem));
				s.getInventoryItem().setPictures(getValue("pics", inventoryitem));
				s.getInventoryItem().setSig(getValue("sig", inventoryitem));
			}
				
			list.add(0, s);
		}
		return list;
		
	}
	
	private static String getValue(String tag, Element element) {
		NodeList nodes = element.getElementsByTagName(tag).item(0).getChildNodes();
		Node node = (Node) nodes.item(0);
		return node.getNodeValue();
	}

	public List<Script> load(){
		return loadXMLForReading();
	}
	
	public List<Script> loadCSV(){
		List<Script> list = new ArrayList<Script>();
		
	    try{
	    	IPreferenceStore store = Activator.getDefault().getPreferenceStore();
		    // Create file 
				File logFile = new File(store.getString(PreferenceConstants.P_PWD) + "\\" + store.getString(PreferenceConstants.P_LOGFILE));
				if (!logFile.exists()){
					logFile.createNewFile();
				}
				FileReader fstream = new FileReader(logFile);
				BufferedReader in = new BufferedReader(fstream);
				String sb = in.readLine();
		        while (sb!=null){
					String arr[] = sb.split("\\|");
					if (arr.length==11){
						Patient p = new Patient();
						Script s = new Script();
						p.setId(arr[0]);
						p.setName(arr[1]);
						s.setPatient(p);
						
						s.setRx(arr[2]);
						s.setSig(arr[3]);
						s.setMitte(arr[4]);
						InventoryItem i = new InventoryItem();
						i.setDosage(arr[5]);
						s.setDate(arr[6]);
						s.setTime(arr[7]);
						i.setInventory(Integer.parseInt(arr[8]));
						s.setPics(arr[9]);
						i.setBin(arr[10]);
						s.setInventoryItem(i);
						list.add(0, s);
					} else {
						System.out.println("Skipping"+sb);
					}
		        	
		        	sb = in.readLine();
		        }
		        //Close the input stream
		        in.close();
		    }catch (Exception e){//Catch exception if any
		      System.err.println("Error: " + e.getMessage());
		    }
		
		return list;
	}
}
